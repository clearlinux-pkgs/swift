#
# This file is auto-generated. DO NOT EDIT
# Generated by: autospec.py
#
# Source0 file verified with key 0x1A541148054E9E38 (infra-root@openstack.org)
#
Name     : swift
Version  : 2.21.0
Release  : 33
URL      : http://tarballs.openstack.org/swift/swift-2.21.0.tar.gz
Source0  : http://tarballs.openstack.org/swift/swift-2.21.0.tar.gz
Source1  : swift-account-auditor.service
Source2  : swift-account-reaper.service
Source3  : swift-account-replicator.service
Source4  : swift-account.service
Source5  : swift-container-auditor.service
Source6  : swift-container-replicator.service
Source7  : swift-container-updater.service
Source8  : swift-container.service
Source9  : swift-object-auditor.service
Source10  : swift-object-replicator.service
Source11  : swift-object-updater.service
Source12  : swift-object.service
Source13  : swift-proxy.service
Source14  : swift.tmpfiles
Source15  : http://tarballs.openstack.org/swift/swift-2.21.0.tar.gz.asc
Summary  : The Swift programming language compiler and tools
Group    : Development/Tools
License  : Apache-2.0
Requires: swift-bin = %{version}-%{release}
Requires: swift-config = %{version}-%{release}
Requires: swift-data = %{version}-%{release}
Requires: swift-license = %{version}-%{release}
Requires: swift-python = %{version}-%{release}
Requires: swift-python3 = %{version}-%{release}
Requires: swift-services = %{version}-%{release}
Requires: PasteDeploy
Requires: castellan
Requires: cryptography
Requires: dnspython
Requires: eventlet
Requires: greenlet
Requires: ipaddress
Requires: keystonemiddleware
Requires: lxml
Requires: netifaces
Requires: oslo.config
Requires: pyeclib
Requires: requests
Requires: six
Requires: xattr
BuildRequires : PasteDeploy
BuildRequires : buildreq-distutils3
BuildRequires : castellan
BuildRequires : cryptography
BuildRequires : dnspython
BuildRequires : eventlet
BuildRequires : greenlet
BuildRequires : ipaddress
BuildRequires : keystonemiddleware
BuildRequires : lxml
BuildRequires : netifaces
BuildRequires : nose
BuildRequires : oslo.config
BuildRequires : pbr
BuildRequires : pyeclib
BuildRequires : pytest
BuildRequires : python-mock
BuildRequires : requests
BuildRequires : six
BuildRequires : xattr

%description
========================
Team and repository tags
========================

.. image:: https://governance.openstack.org/tc/badges/swift.svg
    :target: https://governance.openstack.org/tc/reference/tags/index.html

.. Change things from this point on

Swift
=====

A distributed object storage system designed to scale from a single
machine to thousands of servers. Swift is optimized for multi-tenancy
and high concurrency. Swift is ideal for backups, web and mobile
content, and any other unstructured data that can grow without bound.

Swift provides a simple, REST-based API fully documented at
https://docs.openstack.org/swift/latest/.

Swift was originally developed as the basis for Rackspace's Cloud Files
and was open-sourced in 2010 as part of the OpenStack project. It has
since grown to include contributions from many companies and has spawned
a thriving ecosystem of 3rd party tools. Swift's contributors are listed
in the AUTHORS file.

Docs
----

To build documentation run::

    pip install -r requirements.txt -r doc/requirements.txt
    sphinx-build -W -b html doc/source doc/build/html

and then browse to doc/build/html/index.html. These docs are auto-generated
after every commit and available online at
https://docs.openstack.org/swift/latest/.

For Developers
--------------

Getting Started
~~~~~~~~~~~~~~~

Swift is part of OpenStack and follows the code contribution, review, and
testing processes common to all OpenStack projects.

If you would like to start contributing, check out these
`notes <CONTRIBUTING.rst>`__ to help you get started.

The best place to get started is the
`"SAIO - Swift All In One" <https://docs.openstack.org/swift/latest/development_saio.html>`__.
This document will walk you through setting up a development cluster of
Swift in a VM. The SAIO environment is ideal for running small-scale
tests against Swift and trying out new features and bug fixes.

Tests
~~~~~

There are three types of tests included in Swift's source tree.

#. Unit tests
#. Functional tests
#. Probe tests

Unit tests check that small sections of the code behave properly. For example,
a unit test may test a single function to ensure that various input gives the
expected output. This validates that the code is correct and regressions are
not introduced.

Functional tests check that the client API is working as expected. These can
be run against any endpoint claiming to support the Swift API (although some
tests require multiple accounts with different privilege levels). These are
"black box" tests that ensure that client apps written against Swift will
continue to work.

Probe tests are "white box" tests that validate the internal workings of a
Swift cluster. They are written to work against the
`"SAIO - Swift All In One" <https://docs.openstack.org/swift/latest/development_saio.html>`__
dev environment. For example, a probe test may create an object, delete one
replica, and ensure that the background consistency processes find and correct
the error.

You can run unit tests with ``.unittests``, functional tests with
``.functests``, and probe tests with ``.probetests``. There is an
additional ``.alltests`` script that wraps the other three.

To fully run the tests, the target environment must use a filesystem that
supports large xattrs. XFS is strongly recommended. For unit tests and in-
process functional tests, either mount ``/tmp`` with XFS or provide another
XFS filesystem via the ``TMPDIR`` environment variable. Without this setting,
tests should still pass, but a very large number will be skipped.

Code Organization
~~~~~~~~~~~~~~~~~

-  bin/: Executable scripts that are the processes run by the deployer
-  doc/: Documentation
-  etc/: Sample config files
-  examples/: Config snippets used in the docs
-  swift/: Core code

   -  account/: account server
   -  cli/: code that backs some of the CLI tools in bin/
   -  common/: code shared by different modules

      -  middleware/: "standard", officially-supported middleware
      -  ring/: code implementing Swift's ring

   -  container/: container server
   -  locale/: internationalization (translation) data
   -  obj/: object server
   -  proxy/: proxy server

-  test/: Unit, functional, and probe tests

Data Flow
~~~~~~~~~

Swift is a WSGI application and uses eventlet's WSGI server. After the
processes are running, the entry point for new requests is the
``Application`` class in ``swift/proxy/server.py``. From there, a
controller is chosen, and the request is processed. The proxy may choose
to forward the request to a back-end server. For example, the entry
point for requests to the object server is the ``ObjectController``
class in ``swift/obj/server.py``.

For Deployers
-------------

Deployer docs are also available at
https://docs.openstack.org/swift/latest/. A good starting point is at
https://docs.openstack.org/swift/latest/deployment_guide.html
There is an `ops runbook <https://docs.openstack.org/swift/latest/ops_runbook/index.html>`__
that gives information about how to diagnose and troubleshoot common issues
when running a Swift cluster.

You can run functional tests against a Swift cluster with
``.functests``. These functional tests require ``/etc/swift/test.conf``
to run. A sample config file can be found in this source tree in
``test/sample.conf``.

For Client Apps
---------------

For client applications, official Python language bindings are provided
at https://github.com/openstack/python-swiftclient.

Complete API documentation at
https://developer.openstack.org/api-ref/object-store/

There is a large ecosystem of applications and libraries that support and
work with OpenStack Swift. Several are listed on the
`associated projects <https://docs.openstack.org/swift/latest/associated_projects.html>`__
page.

--------------

For more information come hang out in #openstack-swift on freenode.

Thanks,

The Swift Development Team

%package bin
Summary: bin components for the swift package.
Group: Binaries
Requires: swift-data = %{version}-%{release}
Requires: swift-config = %{version}-%{release}
Requires: swift-license = %{version}-%{release}
Requires: swift-services = %{version}-%{release}

%description bin
bin components for the swift package.


%package config
Summary: config components for the swift package.
Group: Default

%description config
config components for the swift package.


%package data
Summary: data components for the swift package.
Group: Data

%description data
data components for the swift package.


%package license
Summary: license components for the swift package.
Group: Default

%description license
license components for the swift package.


%package python
Summary: python components for the swift package.
Group: Default
Requires: swift-python3 = %{version}-%{release}

%description python
python components for the swift package.


%package python3
Summary: python3 components for the swift package.
Group: Default
Requires: python3-core
Provides: pypi(swift)

%description python3
python3 components for the swift package.


%package services
Summary: services components for the swift package.
Group: Systemd services

%description services
services components for the swift package.


%prep
%setup -q -n swift-2.21.0
cd %{_builddir}/swift-2.21.0

%build
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
export LANG=C.UTF-8
export SOURCE_DATE_EPOCH=1582913986
# -Werror is for werrorists
export GCC_IGNORE_WERROR=1
export CFLAGS="$CFLAGS -fno-lto "
export FCFLAGS="$CFLAGS -fno-lto "
export FFLAGS="$CFLAGS -fno-lto "
export CXXFLAGS="$CXXFLAGS -fno-lto "
export MAKEFLAGS=%{?_smp_mflags}
python3 setup.py build

%check
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
py.test --verbose || :
%install
export MAKEFLAGS=%{?_smp_mflags}
rm -rf %{buildroot}
mkdir -p %{buildroot}/usr/share/package-licenses/swift
cp %{_builddir}/swift-2.21.0/LICENSE %{buildroot}/usr/share/package-licenses/swift/2b8b815229aa8a61e483fb4ba0588b8b6c491890
python3 -tt setup.py build  install --root=%{buildroot}
echo ----[ mark ]----
cat %{buildroot}/usr/lib/python3*/site-packages/*/requires.txt || :
echo ----[ mark ]----
mkdir -p %{buildroot}/usr/lib/systemd/system
install -m 0644 %{SOURCE1} %{buildroot}/usr/lib/systemd/system/swift-account-auditor.service
install -m 0644 %{SOURCE2} %{buildroot}/usr/lib/systemd/system/swift-account-reaper.service
install -m 0644 %{SOURCE3} %{buildroot}/usr/lib/systemd/system/swift-account-replicator.service
install -m 0644 %{SOURCE4} %{buildroot}/usr/lib/systemd/system/swift-account.service
install -m 0644 %{SOURCE5} %{buildroot}/usr/lib/systemd/system/swift-container-auditor.service
install -m 0644 %{SOURCE6} %{buildroot}/usr/lib/systemd/system/swift-container-replicator.service
install -m 0644 %{SOURCE7} %{buildroot}/usr/lib/systemd/system/swift-container-updater.service
install -m 0644 %{SOURCE8} %{buildroot}/usr/lib/systemd/system/swift-container.service
install -m 0644 %{SOURCE9} %{buildroot}/usr/lib/systemd/system/swift-object-auditor.service
install -m 0644 %{SOURCE10} %{buildroot}/usr/lib/systemd/system/swift-object-replicator.service
install -m 0644 %{SOURCE11} %{buildroot}/usr/lib/systemd/system/swift-object-updater.service
install -m 0644 %{SOURCE12} %{buildroot}/usr/lib/systemd/system/swift-object.service
install -m 0644 %{SOURCE13} %{buildroot}/usr/lib/systemd/system/swift-proxy.service
mkdir -p %{buildroot}/usr/lib/tmpfiles.d
install -m 0644 %{SOURCE14} %{buildroot}/usr/lib/tmpfiles.d/swift.conf
## install_append content
install -d -m 755 %{buildroot}/usr/share/defaults/swift
for i in proxy-server account-server container-server object-server container-reconciler object-expirer swift; do
install -p -D -m 644 etc/${i}.conf-sample %{buildroot}/usr/share/defaults/swift/${i}.conf
done
## install_append end

%files
%defattr(-,root,root,-)

%files bin
%defattr(-,root,root,-)
/usr/bin/swift-account-audit
/usr/bin/swift-account-auditor
/usr/bin/swift-account-info
/usr/bin/swift-account-reaper
/usr/bin/swift-account-replicator
/usr/bin/swift-account-server
/usr/bin/swift-config
/usr/bin/swift-container-auditor
/usr/bin/swift-container-info
/usr/bin/swift-container-reconciler
/usr/bin/swift-container-replicator
/usr/bin/swift-container-server
/usr/bin/swift-container-sharder
/usr/bin/swift-container-sync
/usr/bin/swift-container-updater
/usr/bin/swift-dispersion-populate
/usr/bin/swift-dispersion-report
/usr/bin/swift-drive-audit
/usr/bin/swift-form-signature
/usr/bin/swift-get-nodes
/usr/bin/swift-init
/usr/bin/swift-manage-shard-ranges
/usr/bin/swift-object-auditor
/usr/bin/swift-object-expirer
/usr/bin/swift-object-info
/usr/bin/swift-object-reconstructor
/usr/bin/swift-object-relinker
/usr/bin/swift-object-replicator
/usr/bin/swift-object-server
/usr/bin/swift-object-updater
/usr/bin/swift-oldies
/usr/bin/swift-orphans
/usr/bin/swift-proxy-server
/usr/bin/swift-recon
/usr/bin/swift-recon-cron
/usr/bin/swift-reconciler-enqueue
/usr/bin/swift-ring-builder
/usr/bin/swift-ring-builder-analyzer
/usr/bin/swift-ring-composer

%files config
%defattr(-,root,root,-)
/usr/lib/tmpfiles.d/swift.conf

%files data
%defattr(-,root,root,-)
/usr/share/defaults/swift/account-server.conf
/usr/share/defaults/swift/container-reconciler.conf
/usr/share/defaults/swift/container-server.conf
/usr/share/defaults/swift/object-expirer.conf
/usr/share/defaults/swift/object-server.conf
/usr/share/defaults/swift/proxy-server.conf
/usr/share/defaults/swift/swift.conf

%files license
%defattr(0644,root,root,0755)
/usr/share/package-licenses/swift/2b8b815229aa8a61e483fb4ba0588b8b6c491890

%files python
%defattr(-,root,root,-)

%files python3
%defattr(-,root,root,-)
/usr/lib/python3*/*

%files services
%defattr(-,root,root,-)
/usr/lib/systemd/system/swift-account-auditor.service
/usr/lib/systemd/system/swift-account-reaper.service
/usr/lib/systemd/system/swift-account-replicator.service
/usr/lib/systemd/system/swift-account.service
/usr/lib/systemd/system/swift-container-auditor.service
/usr/lib/systemd/system/swift-container-replicator.service
/usr/lib/systemd/system/swift-container-updater.service
/usr/lib/systemd/system/swift-container.service
/usr/lib/systemd/system/swift-object-auditor.service
/usr/lib/systemd/system/swift-object-replicator.service
/usr/lib/systemd/system/swift-object-updater.service
/usr/lib/systemd/system/swift-object.service
/usr/lib/systemd/system/swift-proxy.service
